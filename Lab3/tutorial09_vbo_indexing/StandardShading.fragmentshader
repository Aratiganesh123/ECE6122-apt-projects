#version 120

// Interpolated values from the vertex shaders
varying vec2 UV;
varying vec3 Position_worldspace;
varying vec3 Normal_cameraspace;
varying vec3 EyeDirection_cameraspace;
varying vec3 LightDirection_cameraspace;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform int toggleLighting;  // Toggle variable
uniform int justGreen;
uniform sampler2D textureGreen;


void main() {
    // Light emission properties
        vec3 MaterialDiffuseColor;
        if (justGreen == 1) {
        // Set the fragment color to green
        MaterialDiffuseColor = vec3(0.0, 0.6, 0.0); // Green color
    }
    else{

        MaterialDiffuseColor = texture2D(myTextureSampler, UV).rgb;
    }
        // You probably want to put them as uniforms
        vec3 LightColor = vec3(1, 1, 1);
        float LightPower = 50.0f;

        // Material properties       
         vec3 MaterialAmbientColor = vec3(0.4,0.4,0.4) * MaterialDiffuseColor;
        vec3 MaterialSpecularColor = vec3(0.3, 0.3, 0.3);

        // Distance to the light
        float distance = length(LightPosition_worldspace - Position_worldspace);

        // Normal of the computed fragment, in camera space
        vec3 n = normalize(Normal_cameraspace);
        // Direction of the light (from the fragment to the light)
        vec3 l = normalize(LightDirection_cameraspace);
        // Cosine of the angle between the normal and the light direction, 
        // clamped above 0
        //  - light is at the vertical of the triangle -> 1
        //  - light is perpendicular to the triangle -> 0
        //  - light is behind the triangle -> 0
        float cosTheta = clamp(dot(n, l), 0, 1);

        // Eye vector (towards the camera)
        vec3 E = normalize(EyeDirection_cameraspace);
        // Direction in which the triangle reflects the light
        vec3 R = reflect(-l, n);
        // Cosine of the angle between the Eye vector and the Reflect vector,
        // clamped to 0
        //  - Looking into the reflection -> 1
        //  - Looking elsewhere -> < 1
        float cosAlpha = clamp(dot(E, R), 0, 1);

        vec3 finalColor = MaterialAmbientColor;  // Initialize with ambient color

        if (toggleLighting == 1) {
            // Include Diffuse and Specular components when toggleLighting is 1
            finalColor += (MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance * distance));
            finalColor += (MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha, 5) / (distance * distance));
        }

        gl_FragColor.rgb = finalColor;
        
 
}
